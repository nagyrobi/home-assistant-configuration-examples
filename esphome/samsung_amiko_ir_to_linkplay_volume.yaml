# Use Samsung TV, Amiko STB IR remotes to control volume of a Linkplay-based audio amplifier 
#
# Use case: you have a Samsung TV which ouputs audio via its Toslink connector on the back to a 
# Linkplay chipset based network audio amp (eg. Arylic A50+). You normally use either the TV's
# own remote, or your set top box remote (in this exampe AMIKO Viper 4K V30) to control the setup
# and with the TV audio output set to OPTICAL, you want to control audio volume straight on the 
# amp.
# - Needs the Linkplay amp to be on a static/fixed IP address as it's queried directly
# - Geeklink IR Bridge with an ESP8266 controller as an IR receiver
# - Various remote button codes are decoded by the ESP, these can be first viewed in debug mode
# - Using ESPHoome automations and scripts actions are taken directly against Linkplay's API to 
#   control the volume. Much faster than going through Home Assistant
# 
# The amp, the TV and the STB can be connected to Home Assistant independently of this using their
# own integrations. Some binary sensors are provided to make possible further automations within
# Home Assistant (like switch the amp to corrent input when turning on TV, etc)

substitutions:
  device_name: samsung-to-linklpay
  friendly_name: "Volume controller"
  device_ip: 192.168.1.11
  device_description: "Samsung/Amiko IR to Linkplay API volume control"
  linkplay_amp_ip_address: 192.168.1.20

esphome:
  name: ${device_name}
  comment: "${device_description}"
  platform: ESP8266
  board: esp01_1m
  esp8266_restore_from_flash: true
  on_boot:
  - priority: -300
    then:
      - binary_sensor.template.publish:
          id: room_tv_power_button
          state: OFF
      - binary_sensor.template.publish:
          id: room_stb_power_button
          state: OFF
      - delay: 10s
      - script.execute: get_volume_status
      - delay: 1s
      - script.execute: get_mute_status

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${device_ip}
    gateway: 192.168.1.1
    subnet: 255.255.255.0

logger:
  baud_rate: 0
  level: ERROR # comment this to see IR codes coming in with "dump: all"

api:
  reboot_timeout: 15min
  password: !secret api_password
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_password

web_server:
  include_internal: true
  version: 2
  local: true
  port: 80
  auth:
    username: admin
    password: !secret web_server_password

http_request:
  useragent: esphome/device
  timeout: 1s
  id: http_request_data
  esp8266_disable_ssl_support: true

# GPIOs are Geeklink IR Bridge specific. Use your own if you have a different model or build a custom IR bridge.
output:
- platform: gpio
  pin: # Orange LED
    number: GPIO13
    inverted: true
  id: ir_blink

status_led:
  pin: # Red LED
    number: GPIO12
    inverted: true

remote_transmitter:
  pin: GPIO14
  carrier_duty_percent: 50%

remote_receiver:
  pin:
    number: GPIO5
    inverted: True
    mode:
      input: true
      pullup: true
#  dump: all #uncomment this and comment automations below to test for your remote's codes
  on_samsung:
    then:
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0xE0E0E01F);' # VOL+ Samsung newer type
            - lambda: 'return (x.data == 0xE0E0E01F0);' # VOL+ Samsung older type
        then:
          - script.execute: set_vol_up
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0xE0E0D02F);' # VOL- Samsung newer type
            - lambda: 'return (x.data == 0xE0E0D02F0);' # VOL- Samsung older type
        then:
          - script.execute: set_vol_down
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0xE0E0F00F);' # MUTE Samsung newer type
            - lambda: 'return (x.data == 0xE0E0F00F0);' # MUTE Samsung older type
        then:
          - script.execute: toggle_mute
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0xE0E040BF);' # POWER red button Samsung newer type
            - lambda: 'return (x.data == 0xE0E040BF0);' # POWER red button Samsung older type
        then:
          - binary_sensor.template.publish:
              id: room_tv_power_button
              state: ON
          - script.execute: blink_led
          - delay: 300ms
          - binary_sensor.template.publish:
              id: room_tv_power_button
              state: OFF

  on_lg: # Amiko IR codes are best detected as LG :-)
    then:
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0x40B350AF);' # VOL+ Amiko
        then:
          - script.execute: set_vol_up
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0x40B302FD);' # VOL- Amiko
        then:
          - script.execute: set_vol_down
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0x40B340BF);' # MUTE Amiko
        then:
          - script.execute: toggle_mute
    - if:
        condition:
          or:
            - lambda: 'return (x.data == 0x40B330CF);' # POWER red button Amiko
        then:
          - binary_sensor.template.publish:
              id: room_stb_power_button
              state: ON
          - script.execute: blink_led
          - delay: 300ms
          - binary_sensor.template.publish:
              id: room_stb_power_button
              state: OFF

number:
- platform: template
  name: ${friendly_name} TV Current Volume
  icon: "mdi:volume-source"
  optimistic: true
  max_value: 100
  min_value: 0
  initial_value: 20
  id: room_sound_vol
  step: 1
  set_action:
    then:
      - http_request.get:
          url: !lambda |-
            return ((std::string) "http://${linkplay_amp_ip_address}/httpapi.asp?command=setPlayerCmd:vol:" + to_string((int)round(x))).c_str();

- platform: template
  name: ${friendly_name} TV Volume Step
  icon: "mdi:volume-source"
  optimistic: true
  max_value: 20
  min_value: 1
  initial_value: 2
  id: room_sound_step
  restore_value: true
  step: 1
  mode: box

sensor:
- platform: uptime
  name: ${friendly_name} uptime
- platform: template
  name: ${friendly_name} Linkplay MUTE prev state
  id: room_sound_muted
  internal: true
  accuracy_decimals: 0

script:
- id: set_vol_up
  mode: single
  then:
    - script.execute: get_volume_status
    - script.execute: blink_led
    - number.set:
        id: room_sound_vol
        value: !lambda 'return id(room_sound_vol).state + id(room_sound_step).state;'
    - delay: 70ms

- id: set_vol_down
  mode: single
  then:
    - script.execute: get_volume_status
    - script.execute: blink_led
    - number.set:
        id: room_sound_vol
        value: !lambda 'return id(room_sound_vol).state - id(room_sound_step).state;'
    - delay: 70ms

- id: toggle_mute
  mode: single
  then:
    - script.execute: get_mute_status
    - script.execute: blink_led
    - http_request.get:
        url: !lambda |-
          if (id(room_sound_muted).state == 1) {
            return ((std::string) "http://${linkplay_amp_ip_address}/httpapi.asp?command=setPlayerCmd:mute:0");
          } else {
            return ((std::string) "http://${linkplay_amp_ip_address}/httpapi.asp?command=setPlayerCmd:mute:1");
          }
    - delay: 1000ms

- id: get_mute_status
  mode: single
  then:
    - http_request.get:
        url: !lambda |-
          return ((std::string) "http://${linkplay_amp_ip_address}/httpapi.asp?command=getPlayerStatus").c_str();
        on_response:
          then:
            - lambda: |-
                json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                    id(room_sound_muted).publish_state(root["mute"]);
                });

- id: get_volume_status
  mode: single
  then:
    - http_request.get:
        url: !lambda |-
          return ((std::string) "http://${linkplay_amp_ip_address}/httpapi.asp?command=getPlayerStatus").c_str();
        on_response:
          then:
            - lambda: |-
                json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                    id(room_sound_vol).publish_state(root["vol"]);
                });

- id: blink_led
  mode: restart
  then:
    - output.turn_on: ir_blink
    - delay: 80ms
    - output.turn_off: ir_blink

binary_sensor:
- platform: status
  name: ${friendly_name} hálózat
- platform: template
  name: ${friendly_name} TV Power button
  id: room_tv_power_button
- platform: template
  name: ${friendly_name} STB Power button
  id: room_stb_power_button

button:
- platform: restart
  name: ${friendly_name} controller restart
- platform: template
  name: ${friendly_name} Linkplay LED Toggle
  on_press:
    then:
      - remote_transmitter.transmit_lg:
          data: 0x9191B24D
          nbits: 32

- platform: template
  name: ${friendly_name} TV Volume UP
  on_press:
    then:
      - script.execute: set_vol_up
- platform: template
  name: ${friendly_name} TV Volume DOWN
  on_press:
    then:
      - script.execute: set_vol_down
- platform: template
  name: ${friendly_name} TV Volume MUTE
  on_press:
    then:
      - script.execute: toggle_mute

- platform: template
  name: ${friendly_name} TV Volume status
  internal: true
  on_press:
    then:
      - script.execute: get_volume_status

